# 🏠 AI 부동산 리포트 프로젝트

> 한국폴리텍대학교 AI인공지능소프트웨어과 **우도연**  
> **실거래가 기반 자동 분석 및 투자 리포트 생성 시스템**

---

## 📌 프로젝트 개요

- **학습 동기**  
  복잡한 부동산 실거래 데이터를 수작업으로 수집·분석하는 데 많은 시간이 소요됩니다.  
  이를 자동화하기 위해 웹 크롤링 + AI 분석 기술을 접목한 프로젝트를 기획했습니다.

- **학습 목표**  
  부동산 데이터를 자동으로 수집하고 인공지능으로 분석한 뒤  
  Streamlit을 통해 리포트를 자동 생성함으로써,  
  실무에 가까운 부동산 분석 자동화 기술을 체험하고자 했습니다.

---

## 🔧 전체 시스템 구조

| 단계 | 설명 |
|------|------|
| **① 웹 크롤링** | 네이버 부동산 실거래 데이터를 BeautifulSoup, Selenium으로 수집 |
| **② 데이터 전처리** | 날짜/면적/가격 기준 정리, 결측치 제거, 형식 통일 후 엑셀 저장 |
| **③ AI 분석 적용** | Isolation Forest로 이상 매물 탐지, OpenAI로 요약 생성, 시세 차이 분석 |
| **④ 리포트 생성** | Streamlit 기반 자동 리포트 시각화 (지도, 그래프, 요약 포함) |

---

## 💡 주요 기능 소개

### 📍 실시간 매물 검색
- 지역, 단지, 거래유형 조건으로 필터링
- 엑셀 업로드 방식의 분석기 인터페이스 구현

### ⚠️ 이상 매물 탐지 + 적정 가격 추정
- 고가/저가 이상 매물 탐지 (평균 대비 편차 기준)
- AI가 예측한 적정 가격과 실제 가격 비교

### 📊 텍스트 기반 분석
- BoW, TF-IDF, Word2Vec로 매물 설명 문장 분석
- 유사 매물 추천, 단어 클러스터링 등 시각화

### 🤖 텍스트 숫자 변환 + 감정 분석
- Tokenizer → Sequence → Padding 처리
- LSTM으로 감정 추론 (투자 추천/비추천)

### 🧠 GPT 최종 투자 리포트
- 최종 1~3위 추천 매물 추출
- 투자 매력도 / 유의 요소 / 한 줄 요약 제공

---

## 🔬 사용된 AI 모델 및 기술

| 분류 | 내용 |
|------|------|
| 이상치 탐지 | Isolation Forest |
| 가격 예측 | Dense Layer (Keras 다층 퍼셉트론) |
| 감정 분류 | LSTM + Embedding |
| 텍스트 임베딩 | Word2Vec, TF-IDF |
| 텍스트 분류 | Naive Bayes |
| 유사도 분석 | Cosine Similarity |

---

## 🧠 배운 점

- 비지도 이상치 탐지 모델을 직접 적용해본 경험  
- 자연어 처리에서 순서를 고려하는 LSTM 모델의 강점 체험  
- 벡터 기반 유사도 분석을 통한 실전 매물 추천 로직 이해  
- Streamlit 기반의 인터랙티브한 리포트 구현 능력 향상

---

## 😵 어려웠던 점

- **데이터 확보 어려움**  
  - 네이버 부동산은 공식 API가 없어 크롤링 처리 필요
  - 인증 및 자동화 관련 제한 사항 존재

- **자동 vs 수동 학습의 균형**  
  - 전량 자동화 시 품질 저하 발생  
  - 수동 라벨링과 병행하여 정확도 개선

---

## 🔄 향후 개선 방향

### 🏛️ 국토교통부 실거래가 API 연동
- 실시간 공공 데이터 기반 분석 신뢰도 향상

### 📋 사용자 맞춤형 리포트
- 투자자 / 실거주자 / 중개업자별 템플릿 제공

### 💻 Next.js 기반 프론트 리팩토링
- 퍼포먼스 최적화 및 관리자 기능 확장

---

## 🌐 시연 주소

> [🔗 데모 실행: https://5zed-27t-116-192-153.ngrok-free.app](https://5zed-27t-116-192-153.ngrok-free.app)

---

## 🛠️ 실행 방법 (로컬 개발 환경)

```bash
# 1. 가상환경 생성
python -m venv real_estate_env

# 2. 가상환경 활성화 (Windows 기준)
real_estate_env\Scripts\activate

# 3. Streamlit 실행
streamlit run app.py        # 크롤러 실행
streamlit run app_pro.py    # Streamlit 리포트 실행
